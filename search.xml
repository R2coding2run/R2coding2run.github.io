<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Go语言RPC使用]]></title>
      <url>/2022/04/14/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0RPC%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="Go语言实现RPC编程"><a href="#Go语言实现RPC编程" class="headerlink" title="Go语言实现RPC编程"></a>Go语言实现RPC编程</h2><h3 id="RPC官方库"><a href="#RPC官方库" class="headerlink" title="RPC官方库"></a>RPC官方库</h3><p>在Go语言官方网站的pkg说明中，提供了官方支持的rpc包，具体链接如下：<a href="https://golang.org/pkg/net/rpc/">https://golang.org/pkg/net/rpc/</a>。官方提供的rpc包完整的包名是：<strong>net&#x2F;rpc</strong>。根据官方的解释，rpc包主要是提供通过网络访问一个对象方法的功能。</p>
<p>本节课，我们就来学习如何使用go语言官方提供的RPC包实现RPC调用编码。</p>
<h3 id="net-x2F-rpc库实现RPC调用编程"><a href="#net-x2F-rpc库实现RPC调用编程" class="headerlink" title="net&#x2F;rpc库实现RPC调用编程"></a>net&#x2F;rpc库实现RPC调用编程</h3><p>前文我们已经讲过rpc调用有两个参与者，分别是：<strong>客户端（client）和服务器（server）</strong>。</p>
<p>首先是提供方法暴露的一方–服务器。</p>
<h5 id="一、服务定义及暴露"><a href="#一、服务定义及暴露" class="headerlink" title="一、服务定义及暴露"></a>一、服务定义及暴露</h5><p>在编程实现过程中，服务器端需要注册结构体对象，然后通过对象所属的方法暴露给调用者，从而提供服务，该方法称之为<strong>输出方法</strong>，此输出方法可以被远程调用。当然，在定义输出方法时，能够被远程调用的方法需要遵循一定的规则。我们通过代码进行讲解：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> MethodName(request T1,response *T2) <span class="type">error</span></span><br></pre></td></tr></table></figure>

<p>上述代码是go语言官方给出的对外暴露的服务方法的定义标准，其中包含了主要的几条规则，分别是：</p>
<ul>
<li>1、对外暴露的方法有且只能有两个参数，这个两个参数只能是输出类型或内建类型，两种类型中的一种。</li>
<li>2、方法的第二个参数必须是指针类型。</li>
<li>3、方法的返回类型为error。</li>
<li>4、方法的类型是可输出的。</li>
<li>5、方法本身也是可输出的。</li>
</ul>
<p>我们举例说明：假设目前我们有一个需求，给出一个float类型变量，作为圆形的半径，要求通过RPC调用，返回对应的圆形面积。具体的编程实现思路如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MathUtil <span class="keyword">struct</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该方法向外暴露：提供计算圆形面积的服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mu *MathUtil)</span></span> CalculateCircleArea(req <span class="type">float32</span>, resp *<span class="type">float32</span>) <span class="type">error</span> &#123;</span><br><span class="line">	*resp = math.Pi * req * req <span class="comment">//圆形的面积 s = π * r * r</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">//返回类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述的案例中，我们可以看到：</p>
<ul>
<li>1、Calculate方法是服务对象MathUtil向外提供的服务方法，该方法用于接收传入的圆形半径数据，计算圆形面积并返回。</li>
<li>2、第一个参数req代表的是调用者（client）传递提供的参数。</li>
<li>3、第二个参数resp代表要返回给调用者的计算结果，必须是指针类型。</li>
<li>4、正常情况下，方法的返回值为是error，为nil。如果遇到异常或特殊情况，则error将作为一个字符串返回给调用者，此时，resp参数就不会再返回给调用者。</li>
</ul>
<p>至此为止，已经实现了服务端的功能定义，接下来就是让服务代码生效，需要将服务进行注册，并启动请求处理。</p>
<h5 id="二、注册服务及监听请求"><a href="#二、注册服务及监听请求" class="headerlink" title="二、注册服务及监听请求"></a>二、注册服务及监听请求</h5><p><strong>net&#x2F;rpc包</strong>为我们提供了注册服务和处理请求的一系列方法,结合本案例实现注册及处理逻辑，如下所示：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、初始化指针数据类型</span></span><br><span class="line">mathUtil := <span class="built_in">new</span>(MathUtil) <span class="comment">//初始化指针数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、调用net/rpc包的功能将服务对象进行注册</span></span><br><span class="line">err := rpc.Register(mathUtil)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、通过该函数把mathUtil中提供的服务注册到HTTP协议上，方便调用者可以利用http的方式进行数据传递</span></span><br><span class="line">rpc.HandleHTTP()</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、在特定的端口进行监听</span></span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8081&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> http.Serve(listen, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<p>经过服务注册和监听处理，RPC调用过程中的服务端实现就已经完成了。接下来需要实现的是客户端请求代码的实现。</p>
<h5 id="三、客户端调用"><a href="#三、客户端调用" class="headerlink" title="三、客户端调用"></a>三、客户端调用</h5><p>在服务端是通过Http的端口监听方式等待连接的，因此在客户端就需要通过http连接，首先与服务端实现连接。</p>
<ul>
<li><p>客户端连接服务端</p>
  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client, err := rpc.DialHTTP(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8081&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err.Error())</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>远端方法调用<br>客户端成功连接服务端以后，就可以通过方法调用调用服务端的方法，具体调用方法如下：</p>
  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> req <span class="type">float32</span> <span class="comment">//请求值</span></span><br><span class="line">req = <span class="number">3</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">var</span> resp *<span class="type">float32</span> <span class="comment">//返回值</span></span><br><span class="line">err = client.Call(<span class="string">&quot;MathUtil.CalculateCircleArea&quot;</span>, req, &amp;resp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(*resp)</span><br></pre></td></tr></table></figure>

<p>  上述的调用方法核心在于client.Call方法的调用，该方法有三个参数，第一个参数表示要调用的远端服务的方法名，第二个参数是调用时要传入的参数，第三个参数是调用要接收的返回值。<br>  上述的Call方法调用实现的方式是同步的调用，除此之外，还有一种异步的方式可以实现调用。异步调用代码实现如下：</p>
  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> respSync *<span class="type">float32</span></span><br><span class="line"><span class="comment">//异步的调用方式</span></span><br><span class="line">syncCall := client.Go(<span class="string">&quot;MathUtil.CalculateCircleArea&quot;</span>, req, &amp;respSync, <span class="literal">nil</span>)</span><br><span class="line">replayDone := &lt;-syncCall.Done</span><br><span class="line">fmt.Println(replayDone)</span><br><span class="line">fmt.Println(*respSync)</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="多参数的请求调用参数传递"><a href="#多参数的请求调用参数传递" class="headerlink" title="多参数的请求调用参数传递"></a>多参数的请求调用参数传递</h5><p>上述内容演示了单个参数下的RPC调用，对于多参数下的请求该如何实现。我们通过另外一个案例进行演示。</p>
<p>假设现在需要实现另外一个需求：通过RPC调用实现计算两个数字相加功能并返回计算结果。此时，就需要传递两个参数，具体实现如下：</p>
<p>将参数定义在一个新的结构体中，存放在param包中：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AddParma <span class="keyword">struct</span> &#123;</span><br><span class="line">	Args1 <span class="type">float32</span> <span class="comment">//第一个参数</span></span><br><span class="line">	Args2 <span class="type">float32</span> <span class="comment">//第二个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在server.go文件中，实现两数相加的功能，并实现服务注册的逻辑：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mu *MathUtil)</span></span> Add(param param.AddParma, resp *<span class="type">float32</span>) <span class="type">error</span> &#123;</span><br><span class="line">	*resp = param.Args1 + param.Args2 <span class="comment">//实现两数相加的功能</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">mathUtil := <span class="built_in">new</span>(MathUtil)</span><br><span class="line"></span><br><span class="line">	err := rpc.RegisterName(<span class="string">&quot;MathUtil&quot;</span>, mathUtil)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rpc.HandleHTTP()</span><br><span class="line"></span><br><span class="line">	listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8082&quot;</span>)</span><br><span class="line">	http.Serve(listen, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<p>在本案例中，通过新的注册方法rpc.RegisterName实现了服务的注册和调用。</p>
<p>至此，我们已经完成了net&#x2F;rpc包的最基础的使用。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Go语言]]></title>
      <url>/2022/04/14/Go%E8%AF%AD%E8%A8%80/</url>
      <content type="html"></content>
      
        
    </entry>
    
  
  
</search>
